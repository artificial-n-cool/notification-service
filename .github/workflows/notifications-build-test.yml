name: Notifications App Build and Test

on:
  push:
    branches:
      - develop
  pull_request:
    branches:
      - develop


jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up JDK
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'maven'

      - name: Build with Maven
        run: mvn clean package  # --quiet

      - name: Set up MongoDB service
        uses: supercharge/mongodb-github-action@1.8.0

      - name: Run tests
        run: mvn test  # --quiet

      - name: Set version
        uses: actions/github-script@v4
        with:
          github-token: ${{ secrets.GIT_TOKEN }}
          script: |
            const fs = require('fs');

            // Read the current version from the pom.xml file
            const pomPath = 'pom.xml';
            const pomContent = fs.readFileSync(pomPath, 'utf8');
            const currentVersionRegex = /<version>(.*?)<\/version>/;
            const currentVersionMatch = currentVersionRegex.exec(pomContent);
            const currentVersion = currentVersionMatch[1];

            // Determine the version bump based on the commit messages
            const commits = await github.repos.listCommits({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.sha
            });
            const commitMessages = commits.data.map(commit => commit.commit.message);
            const majorRegex = /^(feat|breaking):/i;
            const minorRegex = /^(feat|fix|perf|refactor|chore|docs):/i;
            let versionBump = 'patch'; // Default to patch if no specific commits found
            if (commitMessages.some(message => majorRegex.test(message))) {
              versionBump = 'major';
            } else if (commitMessages.some(message => minorRegex.test(message))) {
              versionBump = 'minor';
            }

            // Generate the new version
            const currentVersionParts = currentVersion.split('.');
            const newVersionParts = currentVersionParts.map((part, index) => {
              if (index === 0 && versionBump === 'major') {
                return parseInt(part, 10) + 1;
              } else if (index === 1 && versionBump === 'minor') {
                return parseInt(part, 10) + 1;
              } else if (index === 2 && versionBump === 'patch') {
                return parseInt(part, 10) + 1;
              }
              return part;
            });
            const newVersion = newVersionParts.join('.');

            // Update the version in the pom.xml file
            const newPomContent = pomContent.replace(currentVersionRegex, `<version>${newVersion}</version>`);
            fs.writeFileSync(pomPath, newPomContent);

            // Set the output for the next step
            core.setOutput('new_version', newVersion);

      - name: Create release
        uses: actions/create-release@v1
        env:
              GITHUB_TOKEN: ${{ secrets.GIT_TOKEN }}
        with:
                tag_name: ${{ steps.bump_version.outputs.nextRelease.version }}
                release_name: Release ${{ steps.bump_version.outputs.nextRelease.version }}
                draft: false
                prerelease: false